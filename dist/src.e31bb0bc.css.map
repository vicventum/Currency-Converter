{"version":3,"sources":["app\\scss\\config\\_variables.scss","..\\node_modules\\include-media\\dist\\_include-media.scss","app\\scss\\config\\_reset.scss","app\\scss\\helpers\\_utilities.scss","app\\scss\\components\\_buttons.scss","app\\scss\\components\\_converter.scss","app\\scss\\components\\_screen.scss","app\\scss\\components\\_fields.scss","app\\scss\\components\\_input.scss","app\\scss\\components\\_currency.scss","app\\scss\\components\\_suggestions.scss"],"names":[],"mappings":"AAAA;EAEE,kBAAA;EACA,oBAAA;EACA,yBAAA;EACA,mBAAA;EACA,qBAAA;EAEA,2BAAA;EACA,6BAAA;EAEA,gBAAA;EACA,8CAAA;EACA,eAAA;EAGA,aAAA;EACA,kBAAA;EACA,eAAA;EASA,iBAAA;;ACshBE;EDjjBJ;IAqBI,gBAAA;;;AErBJ;EACI,8BAAA;UAAA,sBAAA;EACA,gBAAA;EAEA,uBAAA;;;AAGJ;;;EAGI,2BAAA;UAAA,mBAAA;EACA,UAAA;EACA,SAAA;;;AAGJ;EACI,sBAAA;EACA,wBFiBS;EEhBT,0BFwBO;EEvBP,SAAA;;;AAEJ;;EAEI,wBFWS;EEVT,6BAAA;EACA,YAAA;EACA,kBAAA;;;AAGJ;EACI,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,yBAAA;MAAA,sBAAA;UAAA,mBAAA;EACA,wBAAA;MAAA,qBAAA;UAAA,uBAAA;EACA,YAAA;EACA,aAAA;EACA,yGAAA;EAAA,+EAAA;EAAA,kFAAA;;;AChCA;EAAS,aAAA;;AACT;EAAc,gBAAA;;AF6iBd;EE3iBA;IAGQ,wBAAA;;;AFwiBR;EEriBA;IAGQ,wBAAA;;;;AAOZ;EACI,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,wBAAA;MAAA,qBAAA;UAAA,uBAAA;EACA,yBAAA;MAAA,sBAAA;UAAA,mBAAA;;;ACzBJ;EACI,eAAA;EACA,YAAA;EACA,6BAAA;EACA,wBJ8BS;EI5BT,sDAAA;EAAA,iDAAA;EAAA,8CAAA;;AAEA;EAAU,uCJwBG;;AItBb;EACI,uCAAA;EACA,wCAAA;EACA,uBJkBI;EIhBJ,iBAAA;;AAMJ;EACI,kCAAA;;AAGJ;EACI,iCAAA;;AAGJ;EACI,yCAAA;EACA,uCAAA;EACA,wCAAA;EAEA,yCJWC;EIVD,wCJUC;EIRD,0BJKG;EIHH,mBAAA;EAEA,2CAAA;EAAA,sCAAA;EAAA,mCAAA;;AAEA;EACI,mBJPJ;;;AKrCR;EACI,YAAA;EACA,aAAA;EACA,gBAAA;EACA,iBAAA;EAEA,aAAA;EACA,kCAAA;EAEA,6BAAA;EACA,4BLmCK;EKjCL,kBAAA;EAEA,aAAA;EACA,0BAAA;EACA,2BAAA;EACA,SL8BK;;ACkgBL;EIjjBJ;IAoBQ,aL2BC;;;;AM/CT;EACI,WAAA;EACA,YAAA;EAEA,0CNkCgB;EMhChB,qCNuCK;EMtCL,sCNsCK;EMrCL,yCAAA;EAGD,uBN8BK;EM7BL,mBNyBK;EMxBL,kBAAA;;;ACbH;EACI,WAAA;EAEA,aAAA;EACA,0BAAA;EACA,mCAAA;EACA,wBAAA;MAAA,qBAAA;UAAA,uBAAA;EACA,SAAA;;;ACPJ;EACI,0CAAA;EACA,YAAA;EAEA,0BRsCO;EQrCP,mBAAA;EAEA,uCAAA;EACA,wCAAA;EAIA,yCAAA;EAAA,oCAAA;EAAA,iCAAA;;AAEA;EAAU,8BRqBN;;AQpBJ;EAAY,gCRqBN;;;ASpCV;EACI,WAAA;EAEA,aAAA;EACA,wEAAA;EACA,eAAA;EACA,yBAAA;MAAA,sBAAA;UAAA,8BAAA;EAEA,0BTkCO;;ACugBP;EQjjBJ;IAWQ,WAAA;;;AAGJ;EACI,yBT4BE;;;AU3CV;EACI,oBAAA;EAAA,oBAAA;EAAA,aAAA;;AAEA;EACI,mBAAA;MAAA,WAAA;UAAA,OAAA;EACA,yBVsCE;;AUpCF;EAAqB,kBAAA","file":"src.e31bb0bc.css","sourceRoot":"..\\src","sourcesContent":[":root {\r\n  // Colors\r\n  --primary: #c73434;\r\n  --secondary: #df366e;\r\n  --secondary-dark: #57001d;\r\n  --terceary: #ab38c3;\r\n  --font-color: #bffff6;\r\n\r\n  --valid: rgb(179, 255, 179);\r\n  --invalid: rgb(255, 189, 177);\r\n\r\n  --light: #ffffff;\r\n  --light-transparent: rgba(255, 255, 255, 0.35);\r\n  --dark: #0a0a0a;\r\n\r\n  // Fonts\r\n  --f-big: 7rem;\r\n  --f-medium: 1.5rem;\r\n  --f-small: 2rem;\r\n\r\n  @include media('>=335px') {\r\n    --f-medium: 2rem;\r\n  } \r\n  @include media('>=360px') {\r\n    // $f-medium: 3rem;\r\n  } \r\n  // Sizes\r\n  --border: 2.5rem\r\n}\r\n\r\n$primary: var(--primary);\r\n$secondary: var(--secondary);\r\n$secondary-dark: var(--secondary-dark);\r\n$terceary: var(--terceary);\r\n$font-color: var(--font-color);\r\n$valid: var(--valid);\r\n$invalid: var(--invalid);\r\n$light: var(--light);\r\n$light-transparent: var(--light-transparent);\r\n$dark: var(--dark);\r\n\r\n$f-big: var(--f-big);\r\n$f-medium: var(--f-medium);\r\n$f-small: var(--f-small);\r\n\r\n$border: var(--border);\r\n\r\n$gutter: 2rem;\r\n\r\n// Breakpoints\r\n$breakpoints: (\r\n  'phone': 350px,\r\n  'tablet': 768px,\r\n  'laptop': 1024px,\r\n  'desktop': 1400px\r\n) !default;","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","html {\r\n    box-sizing: border-box;\r\n    font-size: 62.5%;\r\n    // background-color: $dark;\r\n    scroll-behavior: smooth;\r\n}\r\n\r\n*,\r\n*::after,\r\n*::before {\r\n    box-sizing: inherit;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\nbody {\r\n    font-family: monospace;\r\n    color: $font-color;\r\n    font-size: $f-medium;\r\n    margin: 0;\r\n}\r\ninput,\r\nselect {\r\n    color: $font-color;\r\n    background-color: transparent;\r\n    border: none;\r\n    text-align: center;\r\n}\r\n\r\n.main{\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background:linear-gradient(\r\n        to bottom,\r\n        $secondary-dark 0%,\r\n        $dark 100%\r\n    );\r\n}",".u {\r\n    \r\n     // Visibility\r\n    &-none { display: none; }\r\n    &-invisible { overflow: hidden; }\r\n\r\n    &-hide-for-mobile {\r\n        // Hide for tablet and mobile\r\n        @include media('<tablet') {\r\n            display: none!important;\r\n        }\r\n    }\r\n    &-hide-for-desktop {\r\n        // Hide for desktop viewport widths\r\n        @include media('>=tablet') {\r\n            display: none!important;\r\n        }\r\n    }\r\n    \r\n    \r\n}\r\n\r\n%flex-center {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}",".btn {\r\n    cursor: pointer;\r\n    border: none;\r\n    background-color: transparent;\r\n    color: $font-color;\r\n    \r\n    transition: background-color .25s ease-in-out;\r\n\r\n    &:hover { background-color: $secondary-dark; }\r\n    \r\n    &--change {\r\n        border-left: 1px solid $secondary;\r\n        border-right: 1px solid $secondary;\r\n        color: $secondary;\r\n\r\n        font-size: 3.5rem;\r\n\r\n\r\n\r\n    }\r\n\r\n    &--suggestion {\r\n        border: 1px solid $secondary;\r\n    }\r\n\r\n    &--reset {\r\n        border: 1px solid $terceary;\r\n    }\r\n    \r\n    &--submit {\r\n        border-bottom: 1px solid $secondary;\r\n        border-left: 1px solid $secondary;\r\n        border-right: 1px solid $secondary;\r\n\r\n        border-bottom-right-radius: $border;\r\n        border-bottom-left-radius: $border;\r\n\r\n        font-size: $f-medium;\r\n        // color: $font-color;\r\n        letter-spacing: 3px;\r\n\r\n        transition: color .25s ease-in-out;\r\n\r\n        &:hover {\r\n            color: $light;\r\n        }\r\n    }\r\n}",".converter {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    max-width: 40rem;\r\n    max-height: 80rem;\r\n\r\n    padding: $gutter / 2;\r\n    border: 1px solid $secondary;\r\n\r\n    background-color: transparent;\r\n    border-radius: $border;\r\n    \r\n    text-align: center;\r\n\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 30% 1fr;\r\n    gap: $gutter;\r\n\r\n    @include media('>=320px') {\r\n        padding: $gutter;\r\n    }\r\n}",".screen {\r\n    width: 100%;\r\n    height: 100%;\r\n    \r\n    background-color: $light-transparent;\r\n\r\n    border-top-left-radius: $border;\r\n    border-top-right-radius: $border;\r\n    border-bottom: 1px solid $secondary;\r\n    // box-shadow: inset 0rem -1rem 2rem 0rem var(--secondary);\r\n\r\n   font-size: $f-big;\r\n   color: $light;\r\n   text-align: center;\r\n\r\n\r\n   @extend %flex-center\r\n}",".fields {\r\n    width: 100%;\r\n    \r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows:  15% 20% 15% 1fr;\r\n    justify-content: center;\r\n    gap: $gutter / 2;\r\n}",".input {\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n    border: none;\r\n    \r\n    font-size: $f-medium;\r\n    text-align: inherit;\r\n\r\n    border-left: 1px solid $secondary;\r\n    border-right: 1px solid $secondary;\r\n\r\n\r\n\r\n    transition: background-color .2s;\r\n\r\n    &--valid {background-color: $valid;}\r\n    &--invalid {background-color: $invalid;}\r\n\r\n}",".currency {\r\n    --gap: 0rem;\r\n    \r\n    display: grid;\r\n    grid-template-columns: calc(40% - var(--gap)) 20% calc(40% - var(--gap));\r\n    gap: var(--gap);\r\n    justify-content: space-between;\r\n\r\n    font-size: $f-medium;\r\n\r\n    @include media('>=325px') {\r\n        --gap: 1rem;\r\n    }\r\n\r\n    &__item:not(.currency__item--change) {\r\n        font-size: $f-small;\r\n    }\r\n}",".suggestions {\r\n    display: flex;\r\n    \r\n    & > button {\r\n        flex: 1;\r\n        font-size: $f-small;\r\n        \r\n        &:not(:last-child) { margin-right: 1rem; }\r\n    }\r\n}"]}